import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report

# Load your dataset and preprocess it as needed

# Separate the features (train_features) and target (train_target)
# Split the data into training and test sets
# Define the hyperparameter grid to search
param_grid = {
    'criterion': ['gini', 'entropy'],
    'max_depth': [None, 5, 10, 15],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4],
}

# Create a Decision Tree Classifier
dt_model = DecisionTreeClassifier(random_state=42)

# Create GridSearchCV object
grid_search = GridSearchCV(estimator=dt_model, param_grid=param_grid, cv=5, scoring='accuracy', verbose=1, n_jobs=-1)

# Fit the grid search to the data
grid_search.fit(train_features, train_target)

# Get the best hyperparameter values
best_params = grid_search.best_params_
print("Best Hyperparameters:")
print(best_params)

# Use the best model for predictions
best_dt_model = grid_search.best_estimator_
dt_predictions = best_dt_model.predict(test_features)

# Evaluate the best Decision Tree Classifier
dt_accuracy = accuracy_score(test_target, dt_predictions)
dt_report = classification_report(test_target, dt_predictions)

print("\nBest Decision Tree Classifier Metrics:")
print(f"Accuracy: {dt_accuracy:.2f}")
print("Classification Report:")
print(dt_report)

